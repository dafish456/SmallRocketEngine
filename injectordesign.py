# -*- coding: utf-8 -*-
"""InjectorDesign.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qXgXpzeeeX1Qjiy4RnL-exuq9x1YPqrz
"""

!pip install rocketcea

pip install CoolProp

from rocketcea.cea_obj import CEA_Obj
import matplotlib.pyplot as plt
import numpy as np
from CoolProp import CoolProp as cp

psi_to_Pa = 6894.7572931783
Pa_to_psi = 1/psi_to_Pa
in_to_m = 0.0254
kg_to_lb = 2.20462262185
lb_to_kg = 1/kg_to_lb
ft_to_m = 0.3048
in_to_m = 0.0254
m_to_in = 1/in_to_m
m_to_ft = 1/ft_to_m

def degF_to_degK(T):
  return (T - 32)*(5/9) + 273.15
# my engine specs
# Pc = 300 # psi
# Thrust = 200 # lbf
# epsilon = 4.5 # unitless, exit area expansion ratio
# L_star = 2.5 # m, characteristic combustor length
# contraction_ratio = 10 # unitless
# MR = 3 # unitless
# oxidizer = 'GOX'
# fuel = 'GCH4'
# MW_ox = 32
# MW_fuel = 16
# runObj = CEA_Obj(oxName=oxidizer,fuelName=fuel)
# Isp = runObj.get_Isp(Pc,MR,epsilon,frozen=0) # s
# Isp_eff = 0.95 # unitless, Isp efficiency (product of eta c* and eta cf)

# numbers from paper
MW_ox = 36.8
MW_fuel = 16
T_ox = 400*5/9 # K
T_fuel = 800*5/9 # K
rho_ox = 0.86*16.0185 # kg/m^3
rho_fuel = 0.19*16.0185 # kg/m^3
visc_ox = 0.95*10**-5 * 1.4881639 # Pa-s
visc_fuel = 9*10**-5 * 1.4881639 # Pa-s
Thrust = 1000 # lbf
Pc = 100 # psia
MR = 5.75
Isp_eff = 0.92
Isp = 420
dP_ox = 15
dP_fuel = 25
Cd_ox = 0.85
Cd_fuel = 0.75
N = 20

mdot_total = Thrust/(Isp*Isp_eff) # lbs/s
mdot_ox = (MR/(MR+1))*mdot_total # lbs/s
mdot_fuel = mdot_total - mdot_ox # lbs/s

# Injector Design
# N = 1 # number of injector elements
# Cd_ox = 0.85 # unitless
# Cd_fuel = 0.75 # unitless
# dP_ox = 0.2*Pc # psia, ox pressure drop across injector
# P_man_ox = Pc + dP_ox # psia, ox manifold pressure
# dP_fuel = 0.2*Pc # psia, fuel pressure drop across injector
# P_man_fuel = Pc + dP_fuel # psia, fuel manifold pressure
# T_ox = degF_to_degK(120) # deg K, init gas temp of oxidizer
# T_fuel = degF_to_degK(120) # deg K, init gas temp of fuel
# rho_ox = cp.PropsSI('D','P', P_man_ox*psi_to_Pa, 'T', T_ox, 'oxygen') # kg/m^3
# rho_fuel = cp.PropsSI('D','P', P_man_fuel*psi_to_Pa, 'T', T_fuel, 'methane') # kg/m^3
v_ox = np.sqrt(2*(dP_ox*psi_to_Pa)/rho_ox) # m/s
v_fuel = np.sqrt(2*(dP_fuel*psi_to_Pa)/rho_fuel) # m/s
A_ox = (mdot_ox*lb_to_kg)/(N*rho_ox*v_ox*Cd_ox) # m^2
A_fuel = (mdot_fuel*lb_to_kg)/(N*rho_fuel*v_fuel*Cd_fuel) # m^2

#   assuming ox centered coaxial injector
D_ox = np.sqrt(4*A_ox/np.pi) # m, ox tube diameter
D_hydr_ox = D_ox # m, ox hydraulic diameter
t_w_ox = 0.010 * in_to_m # m, ox tube wall thickness
D_inner_fuel = D_ox + 2*t_w_ox # m, inner diameter of fuel annulus
D_outer_fuel = np.sqrt(D_inner_fuel**2 + 4*A_fuel/np.pi) # m, outer diameter of fuel annulus
fuelGap = (D_outer_fuel - D_inner_fuel)/2 # m, gap in fuel annulus
D_hydr_fuel = D_outer_fuel - D_inner_fuel # m, fuel hydraulic diameter
mu_ox = visc_ox # cp.PropsSI('viscosity','P', P_man_ox*psi_to_Pa, 'T', T_ox, 'oxygen') # Pa-s
mu_fuel = visc_fuel # cp.PropsSI('viscosity','P', P_man_fuel*psi_to_Pa, 'T', T_fuel, 'methane') # Pa-s
Re_ox = rho_ox*Cd_ox*v_ox*D_hydr_ox/mu_ox # unitless
Re_fuel = rho_fuel*Cd_fuel*v_fuel*D_hydr_fuel/mu_fuel # unitless
P_dyn_ox = 0.5*rho_ox*v_ox**2 # Pa, oxygen dynamic pressure
P_dyn_fuel = 0.5*rho_fuel*v_fuel**2 # Pa, fuel dynamic pressure
P_dyn_eq = (P_dyn_ox + ((MW_ox/MW_fuel)/MR)*P_dyn_fuel)/(1+(MW_ox/MW_fuel)/MR) # Pa
param = 4*MR/(MW_ox/MW_fuel)

if param < 0.5 or param > 2.0:
  print('Not in range, use Figure 15')

# # cold flow distribution
# L = 1 * in_to_m
# B_a_ratio = 2.43
# B_t_ratio = 0.43
# F_ox = 1
# Da_ox = 0 # combustion influence parameter
# B_ao = (L/D_hydr_ox)*B_a_ratio/((Cd_ox*(1 + Da_ox))**0.625 * (Re_ox/10**5)**0.25 * (P_dyn_ox/P_dyn_eq)**F_ox)
# n_j = 0.55
# MR_j = MR/n_j
# Da_fuel = 0
# F_fuel = 0.5
# B_tf = (L/D_hydr_fuel)*B_t_ratio/((Cd_fuel*(1 + Da_fuel))**1.25 * (Re_fuel/10**5)**0.25 * (P_dyn_fuel/P_dyn_eq)**F_fuel)
# n_i = 0.66
# MR_i = n_i*MR
# U = n_j*(1-n_i)/(1-n_j)
# X_j = (U/(1+U))*((1+MR_j)/(1+MR))
# X_i = 1 - X_j
# E_m = 100*(1 - X_j*((MR_j - MR)/(1 + MR_j)) - X_i*((MR - MR_i)/(MR*(1 + MR_i)))) # %, mixing efficiency

# hot fire
L = 5 * in_to_m # m
B_a_ratio = 2.43
MR_j = 6.04
MR_i = 5.40
Da_RT_ox = 13.9 # RT = room temp (room temp is inlet temp of propellants in Figure 14)
Da_RT_fuel = 14.0 # RT = room temp (room temp is inlet temp of propellants in Figure 14)
Da_DT_ox = Da_RT_ox*(540/400) # DT = design temp (actual inlet temp of propellants)
Da_DT_fuel = Da_RT_fuel*(540/800) # DT = design temp (actual inlet temp of propellants)
B_ao = (L/D_hydr_ox)*B_a_ratio/((Cd_ox*(1 + Da_DT_ox))**0.625 * (Re_ox/10**5)**0.25 * (P_dyn_ox/P_dyn_eq)**0.2)



# cstar = 7100 # ft/s
# eta_cstar = (X_j*cstar_j + X_i*cstar_i)/cstar
# code checking
print(B_ao)